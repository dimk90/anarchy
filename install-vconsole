#!/bin/bash


# Treat unset variables as an error and exit immediately
set -o nounset


## Imports


set -o errexit # exit on non-zero exit code

COMMON=$(curl -fsSL "https://dimk90.github.io/anarchy/common")
# shellcheck source=common
source <(echo "$COMMON")

set +o errexit # disable exit on non-zero exit code


## Routines


install_font() {
    #
    # Install and set Terminus font for console
    #
    printf_section "Installing font\n"

    ## Install terminus

    action_require_package "terminus-font"

    ## Update /etc/vconsole.conf

    # remove existing font setting, $(check_sudo) will add sudo if not root
    action_request_permission
    remove_line "/etc/vconsole.conf" "^FONT=" "$(check_sudo)"
    assert $? "can't modify /etc/vconsole.conf"

    # add new font setting
    action_request_permission
    echo "FONT=ter-124b" | as_root tee -a /etc/vconsole.conf &>> "$LOG_FILE"
    assert $? "can't modify /etc/vconsole.conf"
    action_run 'Update font in /etc/vconsole.conf' "" 'done'

    ## Update initramfs to include new font

    if is_command_available "mkinitcpio"; then
        action_request_permission
        action_run 'Update initramfs to include new font' \
            "$(check_sudo) mkinitcpio -P &>> $LOG_FILE"  \
            'done'
        assert $? "mkinitcpio failed"
    fi

    ## Change current font

    if setfont ter-124b &>> "$LOG_FILE"; then
        action_run 'Change current font' "" 'done'
    fi
}


install_keymap() {
    #
    # Install and set custom keymap for console
    #
    printf_section "Installing keymap\n"

    ## Install kbd

    action_require_package "kbd"

    ## Download keymap file

    # get unique temp file name
    local tmpfile
    tmpfile="$(mktemp)"
    assert $? "can't create temporary file"

    # register cleanup trap
    # shellcheck disable=SC2064
    trap "rm -f $tmpfile" EXIT

    # download keymap file
    curl -fsSL 'https://dimk90.github.io/anarchy/vconsole/us-extra.map' -o "$tmpfile"
    assert $? "can't download keymap file"
    action_run 'Download keymap file' "" 'done'

    # Move the downloaded config to the target location

    action_request_permission
    as_root mv "$tmpfile" '/usr/share/kbd/keymaps/us-extra.map'
    assert $? "can't move keymap file to /usr/share/kbd/keymaps/"
    action_run "$(printf "%b %b %b"      \
        "$(gum style --faint 'Install')" \
        "$(gum style --foreground $GUM_YELLOW 'us-extra')" \
        "$(gum style --faint 'to /usr/share/kbd/keymaps')${DIM}" \
    )" "" 'done'


    ## Load keymap

    if loadkeys us-extra &>> "$LOG_FILE"; then
        action_run 'Switch keymap: us-extra' "" 'done'
    fi

    ## Update /etc/vconsole.conf

    action_request_permission
    as_root localectl set-keymap us-extra &> "$LOG_FILE"
    assert $? "can't set keymap with localectl"
    action_run 'Update keymap in /etc/vconsole.conf' "" 'done'
}


install_locale() {

    printf_section "Configuring locale\n"

    ## Uncomment en_US.UTF-8 in /etc/locale.gen

    # Backup /etc/locale.gen if it exists
    [ -f '/etc/locale.gen' ] && action_request_permission
    backup_file=$(backup_file '/etc/locale.gen' "$(check_sudo)") # sudo will be added if not root
    assert $? "can't backup /etc/locale.gen"
    [ -n "$backup_file" ] && action_run 'Backup' "" "${CLR}${backup_file}"

    # Enable en_US.UTF-8 in /etc/locale.gen
    action_request_permission
    replace_line '/etc/locale.gen' "^#en_US.UTF-8 UTF-8" 'en_US.UTF-8 UTF-8' "$(check_sudo)"
    assert $? "can't modify /etc/locale.gen"
    action_run "$(printf "%b %b %b"   \
        "$(gum style --faint 'Enable')" \
        "$(gum style --foreground $GUM_YELLOW 'en_US.UTF-8')" \
        "$(gum style --faint 'in /etc/locale.gen')${DIM}" \
    )" "" 'done'

    ## Generate locale

    action_request_permission
    action_run 'Regenerate locale' "$(check_sudo) locale-gen &>> $LOG_FILE" 'done'
    assert $? "can't generate locale"

    ## Set locale in /etc/locale.conf

    # Backup /etc/locale.conf if it exists
    [ -f '/etc/locale.conf' ] && action_request_permission
    backup_file=$(backup_file '/etc/locale.conf' "$(check_sudo)") # sudo will be added if not root
    assert $? "can't backup /etc/locale.conf"
    [ -n "$backup_file" ] && action_run 'Backup' "" "${CLR}${backup_file}"

    # update /etc/locale.conf
    action_request_permission
    remove_line '/etc/locale.conf' "^LANG=" "$(check_sudo)"
    assert $? "can't modify /etc/locale.conf"
    echo 'LANG=en_US.UTF-8 ' | as_root tee -a /etc/locale.conf &>> "$LOG_FILE"
    assert $? "can't modify /etc/locale.conf"
    action_run 'Update locale config' "" "${CLR}/etc/locale.conf"
}


main() {

    ## Get gum

    request_gum
    assert $? "no gum - no fun :("

    ## Logging

    printf_section "Logging\n"
    start_logger
    printf_action "log started: ${CLR}${LOG_FILE}\n"

    ## Ask user for items to install

    printf_section "Confirm Items\n"

    local choices
    choices=$(gum choose --no-limit --selected="*" \
                         --header "Select items to install:" \
                         'Locale - Set console locale to en_US.UTF-8' \
                         'Keymap - US/ANSI keyboard with extra bindings: CTRL+,SHIFT+' \
                         'Font - Terminus font + size configuration for console')
    # shellcheck disable=SC2181
    [ $? -ne 0 ] && return 0 # cancelled by user
    mapfile -t choices <<< "$choices" # Convert choices string to array
    printf_action "Selected items: ${CLR}${#choices[@]}\n"

    # Empty choice means nothing to do -> exit
    if [ ${#choices[@]} -eq 0 ]; then
        return 0
    fi

    ## Create backup of /etc/vconsole.conf if needed

    if array_contains "Font*" "${choices[@]}" ||
       array_contains "Keymap*" "${choices[@]}"; then

        [ -f '/etc/vconsole.conf' ] && printf_section "Backup\n" && action_request_permission
        backup_file=$(backup_file '/etc/vconsole.conf' "$(check_sudo)") # sudo will be added if not root
        assert $? "can't backup /etc/vconsole.conf"
        [ -n "$backup_file" ] && action_run "$backup_file"
    fi

    ## Install selected items

    for choice in "${choices[@]}"; do
        case "${choice,,}" in
            locale*)
                install_locale
                ;;
            keymap*)
                install_keymap
                ;;
            font*)
                install_font
                ;;
            *)  assert 1 "invalid choice: ${choice}"
                ;;
        esac
    done

    return 0
}


# Run main and return its exit code
main "$@"
exit $?
