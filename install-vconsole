#!/bin/bash


# Treat unset variables as an error and exit immediately
set -o nounset


## Imports


set -o errexit # exit on non-zero exit code

COMMON=$(curl -fsSL "https://dimk90.github.io/anarchy/common")
source <(echo "$COMMON")

set +o errexit # disable exit on non-zero exit code


## Routines


install_font() {
    #
    # Install and set Terminus font for console
    #
    info "Installing font...\n"

    ## Install font

    request_package "terminus-font"
    assert $? "can't install font"


    ## Change current font

    if setfont ter-124b &> /dev/null; then
        log_result "Change current font\n"
    fi

    ## Update /etc/vconsole.conf

    # remove existing font setting, $(check_sudo) will add sudo if not root
    remove_line "/etc/vconsole.conf" "^FONT=" "$(check_sudo)"
    assert $? "can't modify /etc/vconsole.conf"
    # add new font setting
    echo "FONT=ter-124b" | as_root tee -a /etc/vconsole.conf > /dev/null
    assert $? "can't modify /etc/vconsole.conf"
    log_result "Update font in ${CLR}/etc/vconsole.conf\n"

    ## Update initramfs to include new font

    if is_command_available "mkinitcpio"; then
        as_root_verbose mkinitcpio -P
        assert $? "can't update initramfs"
    fi
}


install_keymap() {
    #
    # Install and set custom keymap for console
    #
    info "Installing keymap...\n"

    ## Install keymap

    request_package "kbd"
    assert $? "can't install kbd"

    ## Download keymap file

    # get unique temp file name
    local tmpfile
    tmpfile=$(mktemp)
    assert $? "can't create temporary file"
    # register cleanup trap
    trap "rm -f $tmpfile" EXIT

    # download keymap file
    curl -fsSL "https://dimk90.github.io/anarchy/vconsole/us-extra.map" -o "$tmpfile"
    assert $? "can't download keymap file"
    log_result "Downloaded keymap file\n"

    # Move the downloaded config to the target location
    as_root mv "$tmpfile" "/usr/share/kbd/keymaps/us-extra.map"
    assert $? "can't move keymap file to /usr/share/kbd/keymaps/"
    log_result "Installed ${YELLOW}us-extra${CLR}${DIM} to ${CLR}/usr/share/kbd/keymaps\n"

    ## Load keymap

    if loadkeys us-extra &> /dev/null; then
        log_result "Switch keymap: ${CLR}us-extra\n"
    fi

    ## Update /etc/vconsole.conf

    as_root localectl set-keymap us-extra
    assert $? "can't set keymap with localectl"
    log_result "Update keymap in ${CLR}/etc/vconsole.conf\n"
}


main() {

    ## Get gum

    request_gum
    assert $? "no gum - no fun :("

    ## Ask user for items to install

    info "Confirm Items\n"
    local choices
    choices=$(gum choose --no-limit --selected="*" \
                         --header "Select items to install:" \
                         'Keymap - US/ANSI keyboard with extra bindings: CTRL+,SHIFT+' \
                         'Locale - Set console locale to en_US.UTF-8' \
                         'Font - Terminus font + size configuration for console')
    mapfile -t choices <<<"$choices" # convert to array

    # Empty choice means nothing to do -> exit
    if [ ${#choices[@]} -eq 0 ]; then
        return 0
    fi

    ## Create backup of /etc/vconsole.conf if needed

    if array_contains "Font*" "${choices[@]}" ||
       array_contains "Keymap*" "${choices[@]}"; then

        # backup /etc/vconsole.conf if it exists
        if [ -f "/etc/vconsole.conf" ]; then
            info "Backup\n"
            backup_name=$(backup_file "/etc/vconsole.conf" "$(check_sudo)") # sudo will be added if not root
            assert $? "can't backup /etc/vconsole.conf"
            log_result "${backup_name}\n"
        fi
    fi

    ## Install selected items

    for choice in "${choices[@]}"; do
        case "${choice,,}" in
            keymap*)
                install_keymap
                ;;
            font*)
                install_font
                ;;
            locale*)
                ;;
            *)  assert 1 "invalid choice: ${choice}"
                ;;
        esac
    done

    return 0
}


# Run main and return its exit code
main "$@"
exit $?
