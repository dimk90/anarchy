#!/bin/bash

# Treat unset variables as an error and exit immediately
set -o nounset


## Imports


set -o errexit # exit on non-zero exit code

COMMON=$(curl -fsSL "https://dimk90.github.io/anarchy/common")
# shellcheck source=common
source <(echo "$COMMON")

set +o errexit # disable exit on non-zero exit code


## Routines


main() {

    ## Get gum

    request_gum
    assert $? "no gum - no fun :("

    ## Logging

    printf_section "Logging\n"
    start_logger
    printf_action "log started: ${CLR}${LOG_FILE}\n"

    ## Ask user for items to install

    printf_section "Confirm Items\n"

    local choices
    choices=$(gum choose --no-limit --selected="*" \
                         --header "Select items to install:" \
                         'Settings' \
                         'Keybindings' \
                         'Set as default editor')
    # shellcheck disable=SC2181
    [ $? -ne 0 ] && return 0 # cancelled by user
    mapfile -t choices <<< "$choices" # Convert choices string to array
    printf_action "Selected items: ${CLR}${#choices[@]}\n"

    # Empty choice means nothing to do -> exit
    if [ ${#choices[@]} -eq 0 ]; then
        return 0
    fi

    ## Install micro

    printf_section "Installing & Configuring\n"

    action_require_package "micro"

    # Create micro config directory if it doesn't exist
    mkdir -p ~/.config/micro
    assert $? "can't create ~/.config/micro"

    ## Install selected items

    for choice in "${choices[@]}"; do
        case "${choice,,}" in
            settings*)
                action_install_file                        \
                    "${HOME}/.config/micro/settings.json"  \
                    "https://dimk90.github.io/anarchy/micro/settings.json"
                ;;
            keybindings*)
                action_install_file                        \
                    "${HOME}/.config/micro/bindings.json"  \
                    "https://dimk90.github.io/anarchy/micro/bindings.json"
                ;;
            *editor*)
                local shells
                shells="$(env_set_permanent "EDITOR" "micro")"
                [ -n "$shells" ] && action_run "Set EDITOR to micro in ${CLR}${BOLD}$shells"
                ;;
            *) assert 1 "invalid choice: ${choice}"
                ;;
        esac
    done

    return 0
}


# Run main and return its exit code
main "$@"
exit $?
